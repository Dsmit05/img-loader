// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/user-img.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserImageClient is the client API for UserImage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserImageClient interface {
	PutImage(ctx context.Context, opts ...grpc.CallOption) (UserImage_PutImageClient, error)
}

type userImageClient struct {
	cc grpc.ClientConnInterface
}

func NewUserImageClient(cc grpc.ClientConnInterface) UserImageClient {
	return &userImageClient{cc}
}

func (c *userImageClient) PutImage(ctx context.Context, opts ...grpc.CallOption) (UserImage_PutImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserImage_ServiceDesc.Streams[0], "/api.UserImage/PutImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &userImagePutImageClient{stream}
	return x, nil
}

type UserImage_PutImageClient interface {
	Send(*PutImageRequest) error
	CloseAndRecv() (*PutImageResponse, error)
	grpc.ClientStream
}

type userImagePutImageClient struct {
	grpc.ClientStream
}

func (x *userImagePutImageClient) Send(m *PutImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userImagePutImageClient) CloseAndRecv() (*PutImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserImageServer is the server API for UserImage service.
// All implementations must embed UnimplementedUserImageServer
// for forward compatibility
type UserImageServer interface {
	PutImage(UserImage_PutImageServer) error
	mustEmbedUnimplementedUserImageServer()
}

// UnimplementedUserImageServer must be embedded to have forward compatible implementations.
type UnimplementedUserImageServer struct {
}

func (UnimplementedUserImageServer) PutImage(UserImage_PutImageServer) error {
	return status.Errorf(codes.Unimplemented, "method PutImage not implemented")
}
func (UnimplementedUserImageServer) mustEmbedUnimplementedUserImageServer() {}

// UnsafeUserImageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserImageServer will
// result in compilation errors.
type UnsafeUserImageServer interface {
	mustEmbedUnimplementedUserImageServer()
}

func RegisterUserImageServer(s grpc.ServiceRegistrar, srv UserImageServer) {
	s.RegisterService(&UserImage_ServiceDesc, srv)
}

func _UserImage_PutImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserImageServer).PutImage(&userImagePutImageServer{stream})
}

type UserImage_PutImageServer interface {
	SendAndClose(*PutImageResponse) error
	Recv() (*PutImageRequest, error)
	grpc.ServerStream
}

type userImagePutImageServer struct {
	grpc.ServerStream
}

func (x *userImagePutImageServer) SendAndClose(m *PutImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userImagePutImageServer) Recv() (*PutImageRequest, error) {
	m := new(PutImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserImage_ServiceDesc is the grpc.ServiceDesc for UserImage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserImage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserImage",
	HandlerType: (*UserImageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PutImage",
			Handler:       _UserImage_PutImage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/user-img.proto",
}
